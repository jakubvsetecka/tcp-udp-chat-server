@startuml

class Mail {
  -MessageType type
  -MessageData data
  +validateString()
  +validateUsername()
  +getMessageID()
}

class MailBox {
  -ProtocolType delivery_service
  -std::queue<Mail> incomingMails
  -std::queue<Mail> outgoingMails
  +waitMail()
  +getOutgoingMail()
  +addMail()
  +sendMail()
}

class MailSerializer {
  -std::vector<char> buffer
  +serialize(const Mail &mail)
}

class ArgumentParser {
  -int argc
  -char *const *argv
  +print()
  +parse()
}

class FSM {
  -State state
  -MailBox &mailbox
  +run()
}

class Listener {
  -std::unordered_map<int, fdType> fdMap
  -MailBox *mailbox
  +run()
  +stop()
}

class StdinListener {
  -Pipe *pipe
  +stop()
}

class NetworkProtocol {
  {abstract}
  +sendData(const Mail &mail)
  +receiveData(char *buffer)
  +openConnection()
  +closeConnection()
}

class TcpProtocol {
  +sendData(const Mail &mail)
  +receiveData(char *buffer)
  +openConnection()
  +closeConnection()
}

class UdpProtocol {
  +sendData(const Mail &mail)
  +receiveData(char *buffer)
  +openConnection()
  +closeConnection()
}

class NetworkConnection {
  +sendData(const Mail &mail)
  +receiveData(char *buffer)
  +openConnection()
  +closeConnection()
}

NetworkProtocol <|-down- TcpProtocol
NetworkProtocol <|-down- UdpProtocol
MailBox --> "1" Mail : contains
MailBox o-- "1" MailSerializer : uses
Listener --> "1" MailBox : interacts
StdinListener --> "1" Pipe : uses
FSM --> "1" MailBox : controls
ArgumentParser ..> "1" MailBox : configures
NetworkConnection ..> NetworkProtocol : uses

@enduml
